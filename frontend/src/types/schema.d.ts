/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/bepa-callback/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Gets the code from the BEPA and exchanges it for an access token. */
    get: operations['bepa_callback_retrieve'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/feedback-entries/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Endpoint for sending feedback (ad-hoc or answer). */
    get: operations['feedback_entries_list'];
    put?: never;
    /** @description Endpoint for sending feedback (ad-hoc or answer). */
    post: operations['feedback_entries_create'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/feedback-entries/{uuid}/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Endpoint for sending feedback (ad-hoc or answer). */
    get: operations['feedback_entries_retrieve'];
    /** @description Endpoint for sending feedback (ad-hoc or answer). */
    put: operations['feedback_entries_update'];
    post?: never;
    /** @description Endpoint for sending feedback (ad-hoc or answer). */
    delete: operations['feedback_entries_destroy'];
    options?: never;
    head?: never;
    /** @description Endpoint for sending feedback (ad-hoc or answer). */
    patch: operations['feedback_entries_partial_update'];
    trace?: never;
  };
  '/api/feedback-forms/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Publicly list active feedback forms. */
    get: operations['feedback_forms_list'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/feedback-forms/{id}/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Publicly list active feedback forms. */
    get: operations['feedback_forms_retrieve'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/feedback-requests/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Feedback-request CRUD.
     *
     *     List endpoint supports filters:
     *         • ?type=owned    requests user created
     *         • ?type=invited  requests user should answer
     *         • ?type=all      all requests (default) */
    get: operations['feedback_requests_list'];
    put?: never;
    /** @description Create a feedback request and mark the note as read for the creator. */
    post: operations['feedback_requests_create'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/feedback-requests/{uuid}/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Feedback-request CRUD.
     *
     *     List endpoint supports filters:
     *         • ?type=owned    requests user created
     *         • ?type=invited  requests user should answer
     *         • ?type=all      all requests (default) */
    get: operations['feedback_requests_retrieve'];
    /** @description Feedback-request CRUD.
     *
     *     List endpoint supports filters:
     *         • ?type=owned    requests user created
     *         • ?type=invited  requests user should answer
     *         • ?type=all      all requests (default) */
    put: operations['feedback_requests_update'];
    post?: never;
    /** @description Feedback-request CRUD.
     *
     *     List endpoint supports filters:
     *         • ?type=owned    requests user created
     *         • ?type=invited  requests user should answer
     *         • ?type=all      all requests (default) */
    delete: operations['feedback_requests_destroy'];
    options?: never;
    head?: never;
    /** @description Feedback-request CRUD.
     *
     *     List endpoint supports filters:
     *         • ?type=owned    requests user created
     *         • ?type=invited  requests user should answer
     *         • ?type=all      all requests (default) */
    patch: operations['feedback_requests_partial_update'];
    trace?: never;
  };
  '/api/feedback-requests/{uuid}/entries/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Feedback-request CRUD.
     *
     *     List endpoint supports filters:
     *         • ?type=owned    requests user created
     *         • ?type=invited  requests user should answer
     *         • ?type=all      all requests (default) */
    get: operations['feedback_requests_entries_retrieve'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/forms/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Override the default list to include default and assigned forms.
     *     - Default forms available to everyone. (based on active cycle)
     *     - Forms assigned specifically to the user. (with custom deadlines)
     *
     *     Return a list of active and expired forms assigned to the user. */
    get: operations['forms_list'];
    put?: never;
    /** @description A ViewSet to handle CRUD operations on forms, and form assignment. */
    post: operations['forms_create'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/forms/{id}/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieve a specific form and its questions. */
    get: operations['forms_retrieve'];
    /** @description A ViewSet to handle CRUD operations on forms, and form assignment. */
    put: operations['forms_update'];
    post?: never;
    /** @description A ViewSet to handle CRUD operations on forms, and form assignment. */
    delete: operations['forms_destroy'];
    options?: never;
    head?: never;
    /** @description A ViewSet to handle CRUD operations on forms, and form assignment. */
    patch: operations['forms_partial_update'];
    trace?: never;
  };
  '/api/forms/{id}/results/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Fetch aggregated results for a form.
     *     Returns a structured JSON with:
     *       - "my_results": aggregated results for the current user (if they are the assessed user)
     *       - "team_results": a list of aggregated results for each subordinate (if any)
     *     Availability conditions:
     *       - Default forms: results are shown only if the cycle has ended.
     *       - Manual forms: results are shown only if the assignment deadline(s) have passed. */
    get: operations['forms_results_retrieve'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/forms/{id}/submit/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** @description Handle form submission. Saves responses for each question and marks the assignment as completed.
     *
     *     For default forms:
     *     - Set `assigned_by` to the leader for TL forms. */
    post: operations['forms_submit_create'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/forms/assign/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** @description Assign a form to a specific user with an optional message.
     *     - Ensure that the form is visible to the assignee.
     *     - Prevents duplicate assignments.
     *
     *     For default forms, this is managed automatically through signals. */
    post: operations['forms_assign_create'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/forms/assigned-by/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Returns a structured JSON object with two keys:
     *     - "my_forms": forms where the current user is directly the assessed user (assigned_by == request.user)
     *     - "team_forms": forms where the current user is the leader of an assessed user (assigned_by__leader == request.user)
     *     Optionally filters by cycle (using cycle_id). If omitted, uses the latest cycle.
     *     Each form is serialized using FormSerializer. */
    get: operations['forms_assigned_by_retrieve'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/login/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** @description API endpoint for logging in a user. */
    post: operations['login_create'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/login/refresh/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** @description Takes a refresh type JSON web token and returns an access type JSON web
     *     token if the refresh token is valid. */
    post: operations['login_refresh_create'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/my-one-on-ones/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['my_one_on_ones_list'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/my-one-on-ones/{id}/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['my_one_on_ones_retrieve'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/my-team/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Read-only list of the current user's direct reports with 1:1 metadata, for the current cycle. */
    get: operations['my_team_list'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/my-team/{member_pk}/one-on-ones/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description CRUD for 1-on-1 sessions *within* `/my-team/<member_id>/`. */
    get: operations['my_team_one_on_ones_list'];
    put?: never;
    /** @description CRUD for 1-on-1 sessions *within* `/my-team/<member_id>/`. */
    post: operations['my_team_one_on_ones_create'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/my-team/{member_pk}/one-on-ones/{id}/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description CRUD for 1-on-1 sessions *within* `/my-team/<member_id>/`. */
    get: operations['my_team_one_on_ones_retrieve'];
    /** @description CRUD for 1-on-1 sessions *within* `/my-team/<member_id>/`. */
    put: operations['my_team_one_on_ones_update'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** @description Custom PATCH method for OneOnOne.
     *     - Only the member can PATCH their own member_vibe (and nothing else).
     *     - The leader cannot PATCH member_vibe.
     *     - Nobody else can PATCH at all.
     *     - Every valid update is logged in UserTimeline for history/auditing. */
    patch: operations['my_team_one_on_ones_partial_update'];
    trace?: never;
  };
  '/api/my-team/{id}/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Read-only list of the current user's direct reports with 1:1 metadata, for the current cycle. */
    get: operations['my_team_retrieve'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/notes/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['notes_list'];
    put?: never;
    post: operations['notes_create'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/notes/{note_uuid}/comments/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['notes_comments_list'];
    put?: never;
    post: operations['notes_comments_create'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/notes/{note_uuid}/comments/{uuid}/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['notes_comments_retrieve'];
    put: operations['notes_comments_update'];
    post?: never;
    delete: operations['notes_comments_destroy'];
    options?: never;
    head?: never;
    patch: operations['notes_comments_partial_update'];
    trace?: never;
  };
  '/api/notes/{note_uuid}/summaries/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['notes_summaries_list'];
    put?: never;
    post: operations['notes_summaries_create'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/notes/{note_uuid}/summaries/{uuid}/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['notes_summaries_retrieve'];
    put: operations['notes_summaries_update'];
    post?: never;
    delete: operations['notes_summaries_destroy'];
    options?: never;
    head?: never;
    patch: operations['notes_summaries_partial_update'];
    trace?: never;
  };
  '/api/notes/{uuid}/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['notes_retrieve'];
    put: operations['notes_update'];
    post?: never;
    delete: operations['notes_destroy'];
    options?: never;
    head?: never;
    patch: operations['notes_partial_update'];
    trace?: never;
  };
  '/api/notes/{uuid}/read/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** @description Mark note as read(Does not need any input params) */
    post: operations['notes_read_create'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/notes/{uuid}/unread/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** @description Mark note as unread(Does not need any input params) */
    post: operations['notes_unread_create'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/profile/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Update or read Profile data */
    get: operations['profile_retrieve'];
    /** @description Update or read Profile data */
    put: operations['profile_update'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** @description Update or read Profile data */
    patch: operations['profile_partial_update'];
    trace?: never;
  };
  '/api/signup/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** @description API endpoint for creating a new user. */
    post: operations['signup_create'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/templates/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description List available templates */
    get: operations['templates_list'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/users/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['users_list'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/users/{uuid}/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['users_retrieve'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/value-tags/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Catalog endpoint for value tags + sections. */
    get: operations['value_tags_list'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/verify-token/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** @description Gets a token and validates it and returns user data */
    post: operations['verify_token_create'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    Comment: {
      /** Format: uuid */
      readonly uuid: string;
      /**
       * ایمیل سازمانی
       * Format: email
       */
      owner?: string;
      readonly owner_name: string;
      /** Format: uuid */
      readonly note: string;
      /** محتوا */
      content: string;
    };
    CommentRequest: {
      /**
       * ایمیل سازمانی
       * Format: email
       */
      owner?: string;
      /** محتوا */
      content: string;
    };
    /** @description Single *or* bulk ad-hoc feedback, and single-receiver answers to requests.
     *
     *     • `receiver_ids`   - list of UUIDs (required)
     *     • `feedback_request_uuid` - present only when answering a request
     *     • `form_uuid`     - optional structured form */
    Feedback: {
      receiver_ids: string[];
      /** Format: uuid */
      feedback_request_uuid?: string | null;
      /** Format: uuid */
      form_uuid?: string | null;
      content: string;
      evidence?: string;
      /** Format: uuid */
      readonly uuid: string;
      readonly sender: components['schemas']['FeedbackUser'];
      readonly receiver: components['schemas']['FeedbackUser'];
      /** Format: date-time */
      readonly date_created: string;
      readonly note: components['schemas']['Note'];
      mentioned_users?: string[];
    };
    /** @description ModelSerializer for FeedbackForm: lists uuid, title, description, and schema. */
    FeedbackForm: {
      /** Format: uuid */
      readonly uuid: string;
      title: string;
      description?: string;
      schema?: unknown;
    };
    /** @description Single *or* bulk ad-hoc feedback, and single-receiver answers to requests.
     *
     *     • `receiver_ids`   - list of UUIDs (required)
     *     • `feedback_request_uuid` - present only when answering a request
     *     • `form_uuid`     - optional structured form */
    FeedbackRequest: {
      receiver_ids: string[];
      /** Format: uuid */
      feedback_request_uuid?: string | null;
      /** Format: uuid */
      form_uuid?: string | null;
      content: string;
      evidence?: string;
      mentioned_users?: string[];
    };
    /** @description Read-only serializer for FeedbackRequest: exposes note details, owner info,
     *     update timestamp, form uuid, and requestees. */
    FeedbackRequestReadOnly: {
      /** Format: uuid */
      readonly uuid: string;
      readonly title: string;
      readonly content: string;
      /** Format: date */
      deadline?: string | null;
      readonly owner_name: string;
      /** Format: uuid */
      readonly owner_uuid: string;
      /** Format: date-time */
      readonly date_updated: string;
      readonly requestees: components['schemas']['FeedbackRequestUserLink'][];
      /** Format: uuid */
      readonly form_uuid: string | null;
      readonly note: components['schemas']['Note'];
    };
    /** @description Serializer for FeedbackRequestUserLink: shows linked user's uuid, name,
     *     email, and answered flag. */
    FeedbackRequestUserLink: {
      /** Format: uuid */
      readonly uuid: string;
      readonly name: string;
      /** Format: email */
      readonly email: string;
      answered?: boolean;
    };
    /** @description Write-only serializer for creating and updating FeedbackRequest: handles title,
     *     content, invitee emails, deadline, and optional form. */
    FeedbackRequestWrite: {
      title: string;
      content: string;
      mentioned_users?: string[];
      /** Format: date */
      deadline?: string | null;
      /** Format: uuid */
      form_uuid?: string | null;
    };
    /** @description Write-only serializer for creating and updating FeedbackRequest: handles title,
     *     content, invitee emails, deadline, and optional form. */
    FeedbackRequestWriteRequest: {
      title: string;
      content: string;
      requestee_emails: string[];
      mentioned_users?: string[];
      /** Format: date */
      deadline?: string | null;
      /** Format: uuid */
      form_uuid?: string | null;
    };
    /** @description Simple serializer for user info in feedback: exposes uuid and name. */
    FeedbackUser: {
      /** Format: uuid */
      readonly uuid: string;
      readonly name: string;
    };
    /** @description Serializer for listing forms, along with its cycle metadata,
     *     and assignment completion status. */
    Form: {
      readonly id: number;
      /** نام */
      name: string;
      /** توضیحات */
      description?: string | null;
      /** فرم پیش‌فرض */
      is_default: boolean;
      /** نوع فرم */
      form_type?: components['schemas']['FormTypeEnum'] | null;
      cycle: number;
      readonly cycle_name: string;
      /** Format: date-time */
      readonly cycle_start_date: string;
      /** Format: date-time */
      readonly cycle_end_date: string;
      readonly is_expired: string;
      readonly is_filled: string;
      readonly assigned_by_name: string;
      readonly assigned_by: string;
    };
    /** @description Serializer for listing forms, along with its cycle metadata,
     *     and assignment completion status. */
    FormRequest: {
      /** نام */
      name: string;
      /** توضیحات */
      description?: string | null;
      /** فرم پیش‌فرض */
      is_default: boolean;
      /** نوع فرم */
      form_type?: components['schemas']['FormTypeEnum'] | null;
      cycle: number;
    };
    /**
     * @description * `PM` - Product Manager
     *     * `TL` - Team Leader
     *     * `MANAGER` - Manager
     *     * `GENERAL` - General
     * @enum {string}
     */
    FormTypeEnum: 'PM' | 'TL' | 'MANAGER' | 'GENERAL';
    /**
     * @description * `:)` - 😊
     *     * `:|` - 😐
     *     * `:(` - ☹️
     * @enum {string}
     */
    LeaderVibeEnum: ':)' | ':|' | ':(';
    /**
     * @description * `:)` - 😊
     *     * `:|` - 😐
     *     * `:(` - ☹️
     * @enum {string}
     */
    MemberVibeEnum: ':)' | ':|' | ':(';
    Note: {
      /** Format: uuid */
      readonly uuid: string;
      /**
       * تاریخ ساخت
       * Format: date-time
       */
      readonly date_created: string | null;
      /**
       * تاریخ بروزرسانی
       * Format: date-time
       */
      readonly date_updated: string | null;
      /**
       * ایمیل سازمانی
       * Format: email
       */
      readonly owner: string;
      readonly owner_name: string;
      /** عنوان */
      title: string;
      /** محتوا */
      content: string;
      /**
       * تاریخ
       * Format: date
       */
      date: string;
      /** دوره */
      period?: number;
      /** سال */
      year?: number;
      /** نوع */
      type?: components['schemas']['TypeEnum'];
      mentioned_users?: string[];
      linked_notes?: string[];
      readonly read_status: string;
      readonly access_level: components['schemas']['NoteUserAccess'] | null;
      /** وضعیت */
      submit_status?: components['schemas']['NoteSubmitStatusEnum'];
      /** Format: uuid */
      readonly one_on_one_member: string;
      readonly one_on_one_id: number;
      /** Format: uuid */
      readonly feedback_request_uuid: string;
      /** Format: uuid */
      readonly feedback_uuid: string;
      /** Format: uuid */
      readonly feedback_request_uuid_of_feedback: string;
    };
    NoteRequest: {
      /** عنوان */
      title: string;
      /** محتوا */
      content: string;
      /**
       * تاریخ
       * Format: date
       */
      date: string;
      /** دوره */
      period?: number;
      /** سال */
      year?: number;
      /** نوع */
      type?: components['schemas']['TypeEnum'];
      mentioned_users?: string[];
      linked_notes?: string[];
      /** وضعیت */
      submit_status?: components['schemas']['NoteSubmitStatusEnum'];
    };
    /**
     * @description * `1` - ثبت اولیه
     *     * `2` - در حال بررسی
     *     * `3` - ثبت نهایی
     * @enum {integer}
     */
    NoteSubmitStatusEnum: 1 | 2 | 3;
    NoteUserAccess: {
      /** مشاهده */
      can_view?: boolean;
      /** ویرایش */
      can_edit?: boolean;
      /** مشاهده جمع‌بندی */
      can_view_summary?: boolean;
      /** نوشتن جمع‌بندی */
      can_write_summary?: boolean;
      /** مشاهده نظرها */
      can_view_feedbacks?: boolean;
      /** نوشتن فیدبک */
      can_write_feedback?: boolean;
    };
    NoteUserAccessRequest: {
      /** مشاهده */
      can_view?: boolean;
      /** ویرایش */
      can_edit?: boolean;
      /** مشاهده جمع‌بندی */
      can_view_summary?: boolean;
      /** نوشتن جمع‌بندی */
      can_write_summary?: boolean;
      /** مشاهده نظرها */
      can_view_feedbacks?: boolean;
      /** نوشتن فیدبک */
      can_write_feedback?: boolean;
    };
    /** @description Handles 1:1 CRUD with:
     *     - Client sends 'tags': [id, ...]
     *     - Server creates Note, OneOnOne, TagLinks in a single transaction
     *     - 'tag_links' read-only for analytics/reporting
     *
     *     Privacy logic:
     *     The leader and member should not see each other's 'vibe' feedback. In the to_representation method,
     *     we remove 'member_vibe' from the output if the current user is the leader, and remove 'leader_vibe'
     *     if the current user is the member. This ensures privacy and prevents bias or retaliation. */
    OneOnOne: {
      readonly id: number;
      readonly note: components['schemas']['Note'];
      readonly member: number;
      readonly cycle: number;
      personal_summary?: string | null;
      career_summary?: string | null;
      performance_summary: string;
      communication_summary?: string | null;
      actions?: string | null;
      leader_vibe: components['schemas']['LeaderVibeEnum'];
      member_vibe?: components['schemas']['MemberVibeEnum'] | null;
      linked_notes?: string[];
      tags: number[];
      readonly tag_links: components['schemas']['OneOnOneTagLinkRead'][];
      extra_notes?: string | null;
      /**
       * تاریخ ساخت
       * Format: date-time
       */
      readonly date_created: string | null;
      /**
       * تاریخ بروزرسانی
       * Format: date-time
       */
      readonly date_updated: string | null;
      /** Format: uuid */
      readonly uuid: string;
    };
    /** @description Handles 1:1 CRUD with:
     *     - Client sends 'tags': [id, ...]
     *     - Server creates Note, OneOnOne, TagLinks in a single transaction
     *     - 'tag_links' read-only for analytics/reporting
     *
     *     Privacy logic:
     *     The leader and member should not see each other's 'vibe' feedback. In the to_representation method,
     *     we remove 'member_vibe' from the output if the current user is the leader, and remove 'leader_vibe'
     *     if the current user is the member. This ensures privacy and prevents bias or retaliation. */
    OneOnOneRequest: {
      personal_summary?: string | null;
      career_summary?: string | null;
      performance_summary: string;
      communication_summary?: string | null;
      actions?: string | null;
      leader_vibe: components['schemas']['LeaderVibeEnum'];
      member_vibe?: components['schemas']['MemberVibeEnum'] | null;
      linked_notes?: string[];
      tags: number[];
      extra_notes?: string | null;
    };
    /** @description Read-only: return tag/section per link on each 1:1 */
    OneOnOneTagLinkRead: {
      readonly id: number;
      tag: components['schemas']['TagRead'];
      section: components['schemas']['SectionEnum'];
    };
    /** @description Read-only: return tag/section per link on each 1:1 */
    OneOnOneTagLinkReadRequest: {
      tag: components['schemas']['TagReadRequest'];
      section: components['schemas']['SectionEnum'];
    };
    PatchedCommentRequest: {
      /**
       * ایمیل سازمانی
       * Format: email
       */
      owner?: string;
      /** محتوا */
      content?: string;
    };
    /** @description Single *or* bulk ad-hoc feedback, and single-receiver answers to requests.
     *
     *     • `receiver_ids`   - list of UUIDs (required)
     *     • `feedback_request_uuid` - present only when answering a request
     *     • `form_uuid`     - optional structured form */
    PatchedFeedbackRequest: {
      receiver_ids?: string[];
      /** Format: uuid */
      feedback_request_uuid?: string | null;
      /** Format: uuid */
      form_uuid?: string | null;
      content?: string;
      evidence?: string;
      mentioned_users?: string[];
    };
    /** @description Write-only serializer for creating and updating FeedbackRequest: handles title,
     *     content, invitee emails, deadline, and optional form. */
    PatchedFeedbackRequestWriteRequest: {
      title?: string;
      content?: string;
      requestee_emails?: string[];
      mentioned_users?: string[];
      /** Format: date */
      deadline?: string | null;
      /** Format: uuid */
      form_uuid?: string | null;
    };
    /** @description Serializer for listing forms, along with its cycle metadata,
     *     and assignment completion status. */
    PatchedFormRequest: {
      /** نام */
      name?: string;
      /** توضیحات */
      description?: string | null;
      /** فرم پیش‌فرض */
      is_default?: boolean;
      /** نوع فرم */
      form_type?: components['schemas']['FormTypeEnum'] | null;
      cycle?: number;
    };
    PatchedNoteRequest: {
      /** عنوان */
      title?: string;
      /** محتوا */
      content?: string;
      /**
       * تاریخ
       * Format: date
       */
      date?: string;
      /** دوره */
      period?: number;
      /** سال */
      year?: number;
      /** نوع */
      type?: components['schemas']['TypeEnum'];
      mentioned_users?: string[];
      linked_notes?: string[];
      /** وضعیت */
      submit_status?: components['schemas']['NoteSubmitStatusEnum'];
    };
    /** @description Handles 1:1 CRUD with:
     *     - Client sends 'tags': [id, ...]
     *     - Server creates Note, OneOnOne, TagLinks in a single transaction
     *     - 'tag_links' read-only for analytics/reporting
     *
     *     Privacy logic:
     *     The leader and member should not see each other's 'vibe' feedback. In the to_representation method,
     *     we remove 'member_vibe' from the output if the current user is the leader, and remove 'leader_vibe'
     *     if the current user is the member. This ensures privacy and prevents bias or retaliation. */
    PatchedOneOnOneRequest: {
      personal_summary?: string | null;
      career_summary?: string | null;
      performance_summary?: string;
      communication_summary?: string | null;
      actions?: string | null;
      leader_vibe?: components['schemas']['LeaderVibeEnum'];
      member_vibe?: components['schemas']['MemberVibeEnum'] | null;
      linked_notes?: string[];
      tags?: number[];
      extra_notes?: string | null;
    };
    PatchedProfileRequest: {
      /** نام */
      name?: string | null;
      /** جیمیل */
      gmail?: string | null;
      /** موبایل */
      phone?: string | null;
    };
    PatchedSummaryRequest: {
      /** محتوا */
      content?: string;
      /** لیبل عملکردی */
      performance_label?: string | null;
      /** تغییر در سطح لدر */
      ladder_change?: string | null;
      /** پاداش عملکردی */
      bonus?: number;
      /**
       * تغییر پله‌ی حقوقی
       * Format: double
       */
      salary_change?: number;
      /**
       * تاریخ برگزاری جلسه‌ی کمیته
       * Format: date
       */
      committee_date?: string | null;
      /** وضعیت */
      submit_status?: components['schemas']['SummarySubmitStatusEnum'];
    };
    Profile: {
      /** Format: uuid */
      readonly uuid: string;
      /**
       * ایمیل سازمانی
       * Format: email
       */
      readonly email: string;
      /** نام */
      name?: string | null;
      /** جیمیل */
      gmail?: string | null;
      /** موبایل */
      phone?: string | null;
      /** نام */
      readonly department: string;
      /** نام */
      readonly chapter: string;
      /** نام */
      readonly team: string;
      /** نام */
      readonly leader: string | null;
      /** سطح */
      readonly level: string | null;
    };
    ProfileList: {
      /** Format: uuid */
      readonly uuid: string;
      /**
       * ایمیل سازمانی
       * Format: email
       */
      email: string;
      /** نام */
      name?: string | null;
      /** نام */
      readonly team: string;
    };
    ProfileRequest: {
      /** نام */
      name?: string | null;
      /** جیمیل */
      gmail?: string | null;
      /** موبایل */
      phone?: string | null;
    };
    /**
     * @description * `personal` - بعد فردی
     *     * `career` - مسیر رشد و انتظارات
     *     * `performance` - مدیریت عملکرد
     *     * `communication` - تعامل و مشتری‌محوری
     * @enum {string}
     */
    SectionEnum: 'personal' | 'career' | 'performance' | 'communication';
    Summary: {
      /** Format: uuid */
      readonly uuid: string;
      /** Format: uuid */
      readonly note: string;
      /** محتوا */
      content: string;
      /** لیبل عملکردی */
      performance_label?: string | null;
      /** تغییر در سطح لدر */
      ladder_change?: string | null;
      /** پاداش عملکردی */
      bonus?: number;
      /**
       * تغییر پله‌ی حقوقی
       * Format: double
       */
      salary_change?: number;
      /**
       * تاریخ برگزاری جلسه‌ی کمیته
       * Format: date
       */
      committee_date?: string | null;
      /** وضعیت */
      submit_status?: components['schemas']['SummarySubmitStatusEnum'];
    };
    SummaryRequest: {
      /** محتوا */
      content: string;
      /** لیبل عملکردی */
      performance_label?: string | null;
      /** تغییر در سطح لدر */
      ladder_change?: string | null;
      /** پاداش عملکردی */
      bonus?: number;
      /**
       * تغییر پله‌ی حقوقی
       * Format: double
       */
      salary_change?: number;
      /**
       * تاریخ برگزاری جلسه‌ی کمیته
       * Format: date
       */
      committee_date?: string | null;
      /** وضعیت */
      submit_status?: components['schemas']['SummarySubmitStatusEnum'];
    };
    /**
     * @description * `1` - ثبت اولیه
     *     * `2` - نهایی‌ شده
     * @enum {integer}
     */
    SummarySubmitStatusEnum: 1 | 2;
    /** @description Read-only serializer for /value-tags/ -- lets the client fetch all tags with their section. */
    TagRead: {
      readonly id: number;
      name_en: string;
      name_fa: string;
      section: components['schemas']['SectionEnum'];
    };
    /** @description Read-only serializer for /value-tags/ -- lets the client fetch all tags with their section. */
    TagReadRequest: {
      name_en: string;
      name_fa: string;
      section: components['schemas']['SectionEnum'];
    };
    TokenRefresh: {
      readonly access: string;
    };
    TokenRefreshRequest: {
      refresh: string;
    };
    TokenRequest: {
      token: string;
    };
    /**
     * @description * `Goal` - هدف
     *     * `Meeting` - جلسه
     *     * `Personal` - شخصی
     *     * `Task` - فعالیت
     *     * `Proposal` - پروپوزال
     *     * `Message` - پیام
     *     * `Template` - قالب
     *     * `OneOnOne` - یک‌به‌یک
     *     * `FeedbackRequest` - درخواست بازخورد
     *     * `Feedback` - بازخورد
     * @enum {string}
     */
    TypeEnum:
      | 'Goal'
      | 'Meeting'
      | 'Personal'
      | 'Task'
      | 'Proposal'
      | 'Message'
      | 'Template'
      | 'OneOnOne'
      | 'FeedbackRequest'
      | 'Feedback';
    User: {
      /** Format: uuid */
      readonly uuid: string;
      /** نام */
      name?: string | null;
      /**
       * ایمیل سازمانی
       * Format: email
       */
      email: string;
      /** گذرواژه */
      password: string;
    };
    UserRequest: {
      /** نام */
      name?: string | null;
      /**
       * ایمیل سازمانی
       * Format: email
       */
      email: string;
      /** گذرواژه */
      password: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  bepa_callback_retrieve: {
    parameters: {
      query?: {
        /** @description Code from BEPA */
        code?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successfully Logged In! */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            /** @description Name of the user */
            name?: string;
            /** @description Email of the user */
            email?: string;
            tokens?: {
              /** @description Refresh token */
              refresh?: string;
              /** @description Access token */
              access?: string;
            };
          };
        };
      };
    };
  };
  feedback_entries_list: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Feedback'][];
        };
      };
    };
  };
  feedback_entries_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['FeedbackRequest'];
        'application/x-www-form-urlencoded': components['schemas']['FeedbackRequest'];
        'multipart/form-data': components['schemas']['FeedbackRequest'];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Feedback'];
        };
      };
    };
  };
  feedback_entries_retrieve: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Feedback'];
        };
      };
    };
  };
  feedback_entries_update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['FeedbackRequest'];
        'application/x-www-form-urlencoded': components['schemas']['FeedbackRequest'];
        'multipart/form-data': components['schemas']['FeedbackRequest'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Feedback'];
        };
      };
    };
  };
  feedback_entries_destroy: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No response body */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  feedback_entries_partial_update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        'application/json': components['schemas']['PatchedFeedbackRequest'];
        'application/x-www-form-urlencoded': components['schemas']['PatchedFeedbackRequest'];
        'multipart/form-data': components['schemas']['PatchedFeedbackRequest'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Feedback'];
        };
      };
    };
  };
  feedback_forms_list: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['FeedbackForm'][];
        };
      };
    };
  };
  feedback_forms_retrieve: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description A unique integer value identifying this فرم بازخورد. */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['FeedbackForm'];
        };
      };
    };
  };
  feedback_requests_list: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['FeedbackRequestReadOnly'][];
        };
      };
    };
  };
  feedback_requests_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['FeedbackRequestWriteRequest'];
        'application/x-www-form-urlencoded': components['schemas']['FeedbackRequestWriteRequest'];
        'multipart/form-data': components['schemas']['FeedbackRequestWriteRequest'];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['FeedbackRequestWrite'];
        };
      };
    };
  };
  feedback_requests_retrieve: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['FeedbackRequestReadOnly'];
        };
      };
    };
  };
  feedback_requests_update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['FeedbackRequestWriteRequest'];
        'application/x-www-form-urlencoded': components['schemas']['FeedbackRequestWriteRequest'];
        'multipart/form-data': components['schemas']['FeedbackRequestWriteRequest'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['FeedbackRequestWrite'];
        };
      };
    };
  };
  feedback_requests_destroy: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No response body */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  feedback_requests_partial_update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        'application/json': components['schemas']['PatchedFeedbackRequestWriteRequest'];
        'application/x-www-form-urlencoded': components['schemas']['PatchedFeedbackRequestWriteRequest'];
        'multipart/form-data': components['schemas']['PatchedFeedbackRequestWriteRequest'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['FeedbackRequestWrite'];
        };
      };
    };
  };
  feedback_requests_entries_retrieve: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['FeedbackRequestWrite'];
        };
      };
    };
  };
  forms_list: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Form'][];
        };
      };
    };
  };
  forms_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['FormRequest'];
        'application/x-www-form-urlencoded': components['schemas']['FormRequest'];
        'multipart/form-data': components['schemas']['FormRequest'];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Form'];
        };
      };
    };
  };
  forms_retrieve: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description A unique integer value identifying this فرم. */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Form'];
        };
      };
    };
  };
  forms_update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description A unique integer value identifying this فرم. */
        id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['FormRequest'];
        'application/x-www-form-urlencoded': components['schemas']['FormRequest'];
        'multipart/form-data': components['schemas']['FormRequest'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Form'];
        };
      };
    };
  };
  forms_destroy: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description A unique integer value identifying this فرم. */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No response body */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  forms_partial_update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description A unique integer value identifying this فرم. */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        'application/json': components['schemas']['PatchedFormRequest'];
        'application/x-www-form-urlencoded': components['schemas']['PatchedFormRequest'];
        'multipart/form-data': components['schemas']['PatchedFormRequest'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Form'];
        };
      };
    };
  };
  forms_results_retrieve: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description A unique integer value identifying this فرم. */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Form'];
        };
      };
    };
  };
  forms_submit_create: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description A unique integer value identifying this فرم. */
        id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['FormRequest'];
        'application/x-www-form-urlencoded': components['schemas']['FormRequest'];
        'multipart/form-data': components['schemas']['FormRequest'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Form'];
        };
      };
    };
  };
  forms_assign_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['FormRequest'];
        'application/x-www-form-urlencoded': components['schemas']['FormRequest'];
        'multipart/form-data': components['schemas']['FormRequest'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Form'];
        };
      };
    };
  };
  forms_assigned_by_retrieve: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Form'];
        };
      };
    };
  };
  login_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UserRequest'];
        'application/x-www-form-urlencoded': components['schemas']['UserRequest'];
        'multipart/form-data': components['schemas']['UserRequest'];
      };
    };
    responses: {
      /** @description Successfully Logged In! */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            /** @description Name of the user */
            name?: string;
            /** @description Email of the user */
            email?: string;
            tokens?: {
              /** @description Refresh token */
              refresh?: string;
              /** @description Access token */
              access?: string;
            };
          };
        };
      };
    };
  };
  login_refresh_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['TokenRefreshRequest'];
        'application/x-www-form-urlencoded': components['schemas']['TokenRefreshRequest'];
        'multipart/form-data': components['schemas']['TokenRefreshRequest'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['TokenRefresh'];
        };
      };
    };
  };
  my_one_on_ones_list: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['OneOnOne'][];
        };
      };
    };
  };
  my_one_on_ones_retrieve: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['OneOnOne'];
        };
      };
    };
  };
  my_team_list: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Profile'][];
        };
      };
    };
  };
  my_team_one_on_ones_list: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        member_pk: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['OneOnOne'][];
        };
      };
    };
  };
  my_team_one_on_ones_create: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        member_pk: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['OneOnOneRequest'];
        'application/x-www-form-urlencoded': components['schemas']['OneOnOneRequest'];
        'multipart/form-data': components['schemas']['OneOnOneRequest'];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['OneOnOne'];
        };
      };
    };
  };
  my_team_one_on_ones_retrieve: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description A unique integer value identifying this One-on-One. */
        id: number;
        member_pk: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['OneOnOne'];
        };
      };
    };
  };
  my_team_one_on_ones_update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description A unique integer value identifying this One-on-One. */
        id: number;
        member_pk: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['OneOnOneRequest'];
        'application/x-www-form-urlencoded': components['schemas']['OneOnOneRequest'];
        'multipart/form-data': components['schemas']['OneOnOneRequest'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['OneOnOne'];
        };
      };
    };
  };
  my_team_one_on_ones_partial_update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description A unique integer value identifying this One-on-One. */
        id: number;
        member_pk: number;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        'application/json': components['schemas']['PatchedOneOnOneRequest'];
        'application/x-www-form-urlencoded': components['schemas']['PatchedOneOnOneRequest'];
        'multipart/form-data': components['schemas']['PatchedOneOnOneRequest'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['OneOnOne'];
        };
      };
    };
  };
  my_team_retrieve: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Profile'];
        };
      };
    };
  };
  notes_list: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Note'][];
        };
      };
    };
  };
  notes_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['NoteRequest'];
        'application/x-www-form-urlencoded': components['schemas']['NoteRequest'];
        'multipart/form-data': components['schemas']['NoteRequest'];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Note'];
        };
      };
    };
  };
  notes_comments_list: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        note_uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Comment'][];
        };
      };
    };
  };
  notes_comments_create: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        note_uuid: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CommentRequest'];
        'application/x-www-form-urlencoded': components['schemas']['CommentRequest'];
        'multipart/form-data': components['schemas']['CommentRequest'];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Comment'];
        };
      };
    };
  };
  notes_comments_retrieve: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        note_uuid: string;
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Comment'];
        };
      };
    };
  };
  notes_comments_update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        note_uuid: string;
        uuid: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CommentRequest'];
        'application/x-www-form-urlencoded': components['schemas']['CommentRequest'];
        'multipart/form-data': components['schemas']['CommentRequest'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Comment'];
        };
      };
    };
  };
  notes_comments_destroy: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        note_uuid: string;
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No response body */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  notes_comments_partial_update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        note_uuid: string;
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        'application/json': components['schemas']['PatchedCommentRequest'];
        'application/x-www-form-urlencoded': components['schemas']['PatchedCommentRequest'];
        'multipart/form-data': components['schemas']['PatchedCommentRequest'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Comment'];
        };
      };
    };
  };
  notes_summaries_list: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        note_uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Summary'][];
        };
      };
    };
  };
  notes_summaries_create: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        note_uuid: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SummaryRequest'];
        'application/x-www-form-urlencoded': components['schemas']['SummaryRequest'];
        'multipart/form-data': components['schemas']['SummaryRequest'];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Summary'];
        };
      };
    };
  };
  notes_summaries_retrieve: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        note_uuid: string;
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Summary'];
        };
      };
    };
  };
  notes_summaries_update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        note_uuid: string;
        uuid: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SummaryRequest'];
        'application/x-www-form-urlencoded': components['schemas']['SummaryRequest'];
        'multipart/form-data': components['schemas']['SummaryRequest'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Summary'];
        };
      };
    };
  };
  notes_summaries_destroy: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        note_uuid: string;
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No response body */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  notes_summaries_partial_update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        note_uuid: string;
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        'application/json': components['schemas']['PatchedSummaryRequest'];
        'application/x-www-form-urlencoded': components['schemas']['PatchedSummaryRequest'];
        'multipart/form-data': components['schemas']['PatchedSummaryRequest'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Summary'];
        };
      };
    };
  };
  notes_retrieve: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Note'];
        };
      };
    };
  };
  notes_update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['NoteRequest'];
        'application/x-www-form-urlencoded': components['schemas']['NoteRequest'];
        'multipart/form-data': components['schemas']['NoteRequest'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Note'];
        };
      };
    };
  };
  notes_destroy: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No response body */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  notes_partial_update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        'application/json': components['schemas']['PatchedNoteRequest'];
        'application/x-www-form-urlencoded': components['schemas']['PatchedNoteRequest'];
        'multipart/form-data': components['schemas']['PatchedNoteRequest'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Note'];
        };
      };
    };
  };
  notes_read_create: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['NoteRequest'];
        'application/x-www-form-urlencoded': components['schemas']['NoteRequest'];
        'multipart/form-data': components['schemas']['NoteRequest'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Note'];
        };
      };
    };
  };
  notes_unread_create: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['NoteRequest'];
        'application/x-www-form-urlencoded': components['schemas']['NoteRequest'];
        'multipart/form-data': components['schemas']['NoteRequest'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Note'];
        };
      };
    };
  };
  profile_retrieve: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Profile'];
        };
      };
    };
  };
  profile_update: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        'application/json': components['schemas']['ProfileRequest'];
        'application/x-www-form-urlencoded': components['schemas']['ProfileRequest'];
        'multipart/form-data': components['schemas']['ProfileRequest'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Profile'];
        };
      };
    };
  };
  profile_partial_update: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        'application/json': components['schemas']['PatchedProfileRequest'];
        'application/x-www-form-urlencoded': components['schemas']['PatchedProfileRequest'];
        'multipart/form-data': components['schemas']['PatchedProfileRequest'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Profile'];
        };
      };
    };
  };
  signup_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UserRequest'];
        'application/x-www-form-urlencoded': components['schemas']['UserRequest'];
        'multipart/form-data': components['schemas']['UserRequest'];
      };
    };
    responses: {
      /** @description Successfully Signed Up! */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            /** @description Name of the user */
            name?: string;
            /** @description Email of the user */
            email?: string;
            tokens?: {
              /** @description Refresh token */
              refresh?: string;
              /** @description Access token */
              access?: string;
            };
          };
        };
      };
    };
  };
  templates_list: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Note'][];
        };
      };
    };
  };
  users_list: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ProfileList'][];
        };
      };
    };
  };
  users_retrieve: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Profile'];
        };
      };
    };
  };
  value_tags_list: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['TagRead'][];
        };
      };
    };
  };
  verify_token_create: {
    parameters: {
      query?: {
        /** @description Token */
        token?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['TokenRequest'];
        'application/x-www-form-urlencoded': components['schemas']['TokenRequest'];
        'multipart/form-data': components['schemas']['TokenRequest'];
      };
    };
    responses: {
      /** @description Verified Successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['User'];
        };
      };
    };
  };
}
